@using CielaDocs.Application.Dtos
@using System.Linq
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery
@{
    Layout = "~/Views/Shared/_LayoutMax.cshtml";
    var tokenSet = antiforgery.GetAndStoreTokens(Context);
    var title = $" година: {ViewBag.Year}";
}
<style>
    .select2-dropdown {
        z-index: 10001;
    }

    .disabledRow {
        color: silver;
        font-weight: 600;
    }

        .disabledRow.dx-state-hover td {
            color: silver !important;
            font-weight: 600;
        }

    .buttongroups-container {
        display: flex;
        justify-content: center;
        font-size: 16px;
    }

        .buttongroups-container > div {
            padding: 0 12px;
        }

        .buttongroups-container:first-child {
            margin-top: 120px;
            margin-bottom: 40px;
        }

</style>
<div class="spacer_5"></div>
<h4>Бюджетна прогноза по ведомствени и администрирани разходни параграфи на програмата за @title</h4>
<h4>@ViewBag.ProgramName</h4>
<h5>Валута:@ViewBag.CurrencyName, Мярка:@ViewBag.CurrencyMeasureName</h5> 
<div class="spacer_5"></div>
<div style="display:inline-block;padding-left:10px;" id="menu"></div>
<div class="spacer_5"></div>
<div id="image-indicator"></div>
<div id="grid"></div>
@Html.Hidden("FunctionalSubAreaId",(int)ViewBag.FunctionalSubAreaId)
@await Html.PartialAsync("_ModalDialogPartial")
@await Html.PartialAsync("_CommonDialogPartial")
@Html.Hidden("nYear", (int)ViewBag.Year)
@section scripts {
    <script>
        const anyModal = $('#anyModal');
        const anyContent = $('#anyContent');
        const anyTitle = $('#anyTitle');
        const commonModal = $('#commonModal');
        const commonContent = $('#commonContent');
        const commonTitle = $('#titleLabel');
        var selectedId = 0;
        let selectedYear = parseInt($('#nYear').val(),10);
  
      
        let loadIndicator;
        $('#image-indicator').dxLoadIndicator({
            indicatorSrc: "@Url.Content("~/images/ajax_loader.gif")",
        });

        $('#btnAnyCancel').on('click', function () {
            anyModal.modal('hide');
            $("#grid").dxDataGrid("instance").refresh();
        });
        $('#btnAnySave').on('click', Save);

        function Save() {
        };
        function getCourtFromGrid() {
            
            let surl = Ciela.baseUrl + "ProgramDataItems/CourtsInProgram";
            commonContent.empty();
            commonTitle.text('Избери отчетна единица');
            commonContent.html('<p>Зареждам данни…</p>')
            $.ajax({
                type: 'Get',
                url: surl,
                data: { functionalSubAreaId: $('#FunctionalSubAreaId').val() },
                success: function (data) {
                    commonContent.html(data);
                }
            });

            commonModal.modal('show');
        }
        function OnClosePopupEventHandlerEx(arg, e) {
            switch (arg) {
                case 'popUpOk':
                    commonModal.modal('hide');
                    var par = e.split('|');
                    redirectme3New("@Url.Action("Index", "ProgramDataCourtItems")", "programNum", par[0], "courtId", par[1], "nyear", selectedYear)
                    break;
                case 'popUpClose':
                    commonModal.modal('hide');
                    break;

            }
        }
        function editCourtRow(id) {
            DevExpress.ui.dialog.alert('Тази функционалност е в процес на обсъждане към момента', 'Внимание');
        }
        function recalculateGrid() {

            $.ajax({
                url: Ciela.baseUrl + "ProgramDataItems/RecalculateGrid", data: { functionalSubAreaId: $('#FunctionalSubAreaId').val(), nyear: selectedYear }
                
            }).done(function (result) {
                $("#grid").dxDataGrid("instance").refresh();
                
            })
                .fail(function (e) {
                    DevExpress.ui.notify('Failed to recalculate data! ' + e);

                });
            return false;
        }

        $(() => {
            loadIndicator = $('#image-indicator').dxLoadIndicator({
                visible: false,
            }).dxLoadIndicator('instance');
            loadIndicator.option('visible', false);
            $('#grid').dxDataGrid({
                dataSource: new DevExpress.data.DataSource({
                    store: new DevExpress.data.CustomStore({
                        key: 'Id',
                        load() {
                            return sendRequest(Ciela.baseUrl + "ProgramDataItems/GetDataGrid", 'Get', { nyear: selectedYear });
                        },
                        update(key, values) {
                            return sendRequest(Ciela.baseUrl + "ProgramDataItems/UpdateDataItem", 'Post', {
                                key: key,
                                values: JSON.stringify(values),
                            });
                           
                        },
                    }),
                }),
                allowColumnReordering: true,
                allowColumnResizing: true,
                columnAutoWidth: true,
                columnChooser: {
                    enabled: true,
                   
                },
                columnFixing: {
                    enabled: true,
                },
                paging: {
                    pageSize: 50,
                },
                pager: {
                    visible: true,
                    showNavigationButtons: true,
                    allowedPageSizes: [10, 25, 50, 100],
                    showPageSizeSelector: true,
                    showInfo: true,
                    showNavigationButtons: true,
                },
                searchPanel: {
                    visible: true,
                    highlightCaseSensitive: true,
                },
                selection: {
                    mode: "single"
                },
                showBorders: true,
                showRowLines: true,
                decimalSeparator: '.',
              
                columns: [
                    {
                        dataField: "PrnCode",
                        width: "10%",
                        caption: "№"
                    },
                    {
                        dataField: "Name",
                        width: "60%",
                        caption: "Наименование"
                    },
                    {
                        dataField: "Nval1",
                        width: "10%",
                        caption: selectedYear,
                        alllowEditing: true,
                        valueFormat: '#0.00',
                        dataType: 'number',
                        format: {
                            formatter: function (value) {
                                return value.toLocaleString('bg-BG');
                            }
                        }

                    },
                    {
                        dataField: "Nval2",
                        width: "10%",
                        caption: selectedYear+1,
                        alllowEditing: true,
                        valueFormat: '#0.00',
                        dataType: 'number',
                        format: {
                            formatter: function (value) {
                                return value.toLocaleString('bg-BG');
                            }
                        }

                    }, {
                        dataField: "Nval3",
                        width: "10%",
                        caption: selectedYear+2,
                        alllowEditing: true,
                        valueFormat: '#0.00',
                        dataType: 'number',
                        format: {
                            formatter: function (value) {
                                return value.toLocaleString('bg-BG');
                            }
                        }

                    },
                    {
                        dataField: "Nval4",
                        width: "10%",
                        caption: selectedYear+3,
                        alllowEditing: true,
                        valueFormat: '#0.00',
                        dataType: 'number',
                        format: {
                            formatter: function (value) {
                                return value.toLocaleString('bg-BG');
                            }
                        }

                    },
                ],
                toolbar: {
                    items: [
                        {
                            location: 'after',
                            widget: 'dxButton',
                            options: {
                                icon: 'formula',
                                onClick() {
                                    recalculateGrid();
                                },
                            },
                        },
                         {
                            location: 'after',
                            widget: 'dxButton',
                            options: {
                                icon: 'more',
                                onClick() {
                                    getCourtFromGrid();
                                },
                            },
                        },
                        'columnChooserButton',
                        "searchPanel",
                    ],
                },
                masterDetail: {
                    enabled: true,
                    template(container, options) {
                        const currentRowData = options.data;

                        $('<div>')
                            .addClass('master-detail-caption')
                            .text(`${currentRowData.PrnCode} ,№ ${currentRowData.Name} Отчетни единици:`)
                            .appendTo(container);

                        $('<div>')
                            .dxDataGrid({
                                columnAutoWidth: true,
                                allowColumnReordering: true,
                                allowColumnResizing: true,
                                showBorders: true,
                                showRowLines: true,
                                searchPanel: {
                                    visible: true,
                                    highlightCaseSensitive: true,
                                },
                                selection: {
                                    mode: "single"
                                },
                                columns: [{
                                    dataField: "CourtName",
                                    width: "15%",
                                    caption: "Отчетна единица"
                                },
                                    {
                                        dataField: "PrnCode",
                                        width: "10%",
                                        caption: "№"
                                    },
                                    {
                                        dataField: "Name",
                                        width: "60%",
                                        caption: "Наименование"
                                    },
                                    {
                                        dataField: "Nval1",
                                        width: "10%",
                                        caption: selectedYear,
                                        alllowEditing: true,
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        }

                                    },
                                    {
                                        dataField: "Nval2",
                                        width: "10%",
                                        caption: selectedYear + 1,
                                        alllowEditing: true,
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        }

                                    }, {
                                        dataField: "Nval3",
                                        width: "10%",
                                        caption: selectedYear + 2,
                                        alllowEditing: true,
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        }

                                    }, {
                                        dataField: "Nval4",
                                        width: "10%",
                                        caption: selectedYear + 3,
                                        alllowEditing: true,
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        }

                                    },

                                ],
                                summary: {
                                    totalItems: [{
                                        column: 'Id',
                                        summaryType: 'count',
                                    }, {
                                        column: 'Nval1',
                                        summaryType: 'sum',
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        },
                                    }, {
                                        column: 'Nval2',
                                        summaryType: 'sum',
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        },
                                    }, {
                                        column: 'Nval3',
                                        summaryType: 'sum',
                                        valueFormat: '#0.00',
                                        dataType: 'number',
                                        format: {
                                            formatter: function (value) {
                                                return value.toLocaleString('bg-BG');
                                            }
                                        },
                                    }],
                                },
                                toolbar: {
                                    items: [
                                         {
                                            location: 'after',
                                            name: 'searchPanel',
                                            visible: 'true',
                                            locateInMenu: "auto",

                                        }
                                    ],
                                },
                                dataSource: new DevExpress.data.DataSource({
                                    store: new DevExpress.data.CustomStore({
                                        key: 'Id',
                                        load() {
                                            return sendRequest(Ciela.baseUrl + "ProgramDataItems/GetCourtsByProgramDataId", 'Get', { nyear: selectedYear, programDataId: options.key });
                                        },
                                        update(key, values) {
                                            return sendRequest(Ciela.baseUrl + "ProgramDataItems/UpdateDataCourtItem", 'Post', {
                                                key: key,
                                                values: JSON.stringify(values),
                                            });
                                        },
                                    }),
                                }),
                                focusedRowEnabled: true,
                                paging: {
                                    pageSize: 10,
                                },
                                pager: {
                                    visible: true,
                                    allowedPageSizes: [5, 10, 'Всички'],
                                    showPageSizeSelector: true,
                                    showInfo: false,
                                    showNavigationButtons: true,
                                },
                               editing: {
                                    mode: 'cell',
                                    allowUpdating: true,
                                    allowDeleting: false,
                                    allowAdding: false,
                                },
                                onEditorPreparing: function (e) {
                                    if (e.dataField === "PrnCode"  || e.dataField === "Name") e.editorOptions.disabled = true
                                    if ((e.dataField === "Nval1" || e.dataField === "Nval2" || e.dataField === "Nval3" || e.dataField === "Nval4") && e.parentType === "dataRow") {
                                        const defaultValueChangeHandler = e.editorOptions.onValueChanged;
                                        e.editorOptions.onValueChanged = function (args) {
                                            defaultValueChangeHandler(args);
                                        }
                                    }
                                }
                                ,
                                onRowPrepared: function (info) {
                                    if (info.rowType === "data" && info.data.ValueAllowed === false) {
                                        info.rowElement.css('background', '#ffcc99');
                                    }
                                },
                            }).appendTo(container);
                    },
                },
                editing: {
                    mode: 'cell',
                    allowUpdating: true,
                    allowDeleting: false,
                    allowAdding: false,
                },
                onEditorPreparing: function (e) {
                    if (e.dataField === "PrnCode" || e.dataField === "Name") e.editorOptions.disabled = true
                    if ((e.dataField === "Nval1" || e.dataField === "Nval2" || e.dataField === "Nval3"|| e.dataField === "Nval4") && e.parentType === "dataRow") {
                        const defaultValueChangeHandler = e.editorOptions.onValueChanged;
                        e.editorOptions.onValueChanged = function (args) { 
                            defaultValueChangeHandler(args);
                        }
                    }
                    
                },
                onRowRemoved: function (e) {
                    e.component.selectRowsByIndexes(0);
                },
                onSelectionChanged: function (items) {
                    if (items.selectedRowsData[0]) {
                        selectedId = items.selectedRowsData[0].Id;
                    }
                },
                focusedRowEnabled: true,
                onFocusedRowChanged(e) {
                    if (e) {
                        getExtraDataItem(e.row);
                    }
                },
                onRowPrepared: function (info) {
                    if (info.rowType === "data" && info.data.ValueAllowed === false) {
                        info.rowElement.css('background', '#ffcc99');
                    }
                },
                onRowUpdated() {
                    recalculateGrid();
                },

            });


        });
        async function getExtraDataItem(row) {


            return false;
        }

        const menuData = [{
            id: '1',
            name: 'Начало',
            icon: '../images/back.png',


        },
            {
                id: '6_1',
                name: 'Експорт',
                icon: '../images/exporter.svg',


            }, {
                id: '4',
                name: 'Обнови',
                icon: '../images/refresh.png',

        },
        ];
        const dxMenu = $('#menu').dxMenu({
            dataSource: menuData,
            hideSubmenuOnMouseLeave: false,
            displayExpr: 'name',
            onItemClick(data) {
                const item = data.itemData;
                if (item.id) {

                    switch (item.id) {

                        case '1':
                            window.location.href = Ciela.baseUrl;
                            break;
                        case '4':
                            $("#grid").dxDataGrid("instance").refresh();
                            break;

                        case '3': addUploadFile();
                            break;
                        case '6_1':
                            var workbook = new ExcelJS.Workbook();
                            var worksheet = workbook.addWorksheet("Owners");

                            DevExpress.excelExporter.exportDataGrid({
                                component: $("#grid").dxDataGrid("instance"),
                                worksheet: worksheet
                            }).then(function () {
                                workbook.xlsx.writeBuffer().then(function (buffer) {
                                    saveAs(new Blob([buffer], { type: "application/octet-stream" }), "ProgramData.xlsx");
                                });
                            });
                            break;
                    }
                }
            },
        }).dxMenu('instance');

        const showSubmenuModes = [{
            name: 'onHover',
            delay: { show: 0, hide: 500 },
        }, {
            name: 'onClick',
            delay: { show: 0, hide: 300 },
        }];


    </script>
}
